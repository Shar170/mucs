import numpy as np
import pandas as pd
import plotly.express as px
import streamlit as st
import math_module as mm
from daughter_distr import daughter_distributions
html_theme = "sphinx_rtd_theme"

st.set_page_config(layout='wide')


#-avStart
avStSize=st.sidebar.slider('–ò—Å—Ö–æ–¥–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏—Ü, –º–∏–∫—Ä–æ–Ω', min_value=0.5, max_value=100.0, value=23.7, step=0.5)
#-typeMill 
typeMill = 0
material = 'Al‚ÇÇO‚ÇÉ' #st.sidebar.radio("–ò–∑–º–µ–ª—å—á–∞–µ–º—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª",('Al‚ÇÇO‚ÇÉ', 'SiC'))
if material == 'Al‚ÇÇO‚ÇÉ':
    #-massRatio
    MassRate = st.sidebar.slider('–û—Ç–Ω–æ—à–µ–Ω–∏–µ –º–∞—Å—Å —à–∞—Ä–æ–≤ –∫ –ø–æ—Ä–æ—à–∫—É:', min_value=0.1, max_value=20.0, value=3.0, step=0.1)
    #-sizeBall
    BallSize = st.sidebar.slider('–†–∞–∑–º–µ—Ä –º–µ–ª—é—â–∏—Ö —à–∞—Ä–æ–≤:', min_value=0.1, max_value=20.0, value=3.0, step=0.1)
    #-typePAV
    typePAV = -1
    #-oborot
    oborot = 250
    typeMill = 0
    #-densParticle
    densParticle = 4000
    #-densBalls
    densBalls = 5680



    daughter_distribution_key = st.sidebar.selectbox("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤", daughter_distributions.keys())
    recomendations = {
    '–õ–∏–Ω–µ–π–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ': [5.0, 1.0], 
    '–ì–∞–º–º–∞-—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ':  [5.0, 1.0], 
    '–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ':  [5.0, 1.0], 
    '–õ–æ–≥-–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ':  [5.0, 1.0], 
    '–£–ø—Ä–æ—â—ë–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ':  [5.0, 1.0],
    '–ë–µ—Ç–∞-—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ': [296.91, 1.21],
    '–õ–µ–≥–∞—Å–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ': [3.85, 2.35]
    }

    L = st.sidebar.number_input("–§–µ–Ω–æ–º–µ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç", min_value=0.0, value=recomendations[daughter_distribution_key ][0])
    P = st.sidebar.number_input("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ—á–µ—Ä–Ω–∏—Ö —á–∞—Å—Ç–∏—Ü", min_value=0.0, value=recomendations[daughter_distribution_key ][1])#0.17# 1.43682
else:
    typeMill = 1
    #-oborot
    oborot = st.sidebar.slider('–°–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏–µ –±–∞—Ä–∞–±–∞–Ω–∞:', min_value=100.0, max_value=600.0, value=250.0, step=10.0)
    #-densBalls
    BallMaterial = st.sidebar.radio('–ú–∞—Ç–µ—Ä–∏–∞–ª –º–µ–ª—é—â–∏—Ö —à–∞—Ä–æ–≤', ('WC','ZrO‚ÇÇ'))
    MassRate = 1
    BallSize = 10
    if BallMaterial == 'WC':
        densBalls = 15770
    elif BallMaterial == 'ZrO‚ÇÇ':
        densBalls = 5680
    
    PAV = st.sidebar.radio('–ù–∞–ª–∏—á–∏–µ –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –ü–ê–í', ('–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', '–∏–∑–æ–ø—Ä–æ–ø–∏–ª–æ–≤—ã–π —Å–ø–∏—Ä—Ç', '—ç—Ç–∏–ª–æ–≤—ã–π —Å–ø–∏—Ä—Ç')) #–ü–í–ü, 0,001 - 0,004–≥. 
    #-typePAV
    if PAV == '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç':
        typePAV = 0
    elif PAV == '–∏–∑–æ–ø—Ä–æ–ø–∏–ª–æ–≤—ã–π —Å–ø–∏—Ä—Ç':
        typePAV = 2
    elif PAV == '—ç—Ç–∏–ª–æ–≤—ã–π —Å–ø–∏—Ä—Ç':
        typePAV = 3
    #-densParticle
    densParticle = 3210
    L=0.99450000000001
    P=0.06526484999999996
    
'''
# –ú–æ–¥—É–ª—å –∏–∑–º–µ–ª—å—á–µ–Ω–∏—è –≤ –ø–ª–∞–Ω–µ—Ç–∞—Ä–Ω–æ–π –º–µ–ª—å–Ω–∏—Ü–µ
### –ö–æ–Ω–µ—á–Ω—ã–π —Ç—Ä–µ–±—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä üèÅ
'''
averageSize=st.slider('–ö–æ–Ω–µ—á–Ω—ã–π –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä, –º–∏–∫—Ä–æ–Ω', min_value=0.01, max_value=10.0, value=2.68, step=0.01)


best_model = None 
with st.expander('–û–±—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏'):
    import energy 
    energy.show_menu()


bt = st.button('–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—á—ë—Ç')
bt_help = st.button('–ü–æ–º–æ—â—å')

#@st.cache(suppress_st_warning=True,allow_output_mutation=True)
def runCalc(_densBalls = densBalls, _massRatio = MassRate,_sizeBall=BallSize,_densParticle=densParticle, _oborot = oborot, _typePAV = typePAV, _L = L, _P = P):
    if best_model is None:
        st.warning('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
    else:
        st.success('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å ' + str(best_model))

    array_B = mm.get_array_B(B_function=daughter_distributions[daughter_distribution_key])

    outData = mm.run_calculation(MassRate,BallSize, avStSize, best_model, L=_L, P=_P, array_B=array_B)
    return outData #pd.DataFrame(outData['stats'])
        
            
use_ML_model = False  
if averageSize > avStSize:
    st.error('–£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–Ω–µ—á–Ω—ã–π –∏ –∏—Å—Ö–æ–¥–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã')
else:
    if len(energy.models) > 0:
        st.write('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏!')
        models = [None]
        models.extend(energy.models)
        best_model = st.selectbox('–ú–æ–¥–µ–ª—å',  models,  index=2, format_func=lambda m : "–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è" if m is None else m.named_steps['model'].__class__.__name__)

    if bt :
        
        resData = pd.DataFrame(runCalc()['stats'])
        resData.to_csv('resData.csv', index=False)
        
        _, col, _ = st.columns([1,3,1])
        with col:
            st.write('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏—Ü –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º:')
            st.table(resData[['time', 'mean', 'mass']])

        try:
            target_time = resData[resData['mean'] <= averageSize]['time'].iloc[0]
            st.write('–ñ–µ–ª–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è –Ω–∞ ' + str(round(target_time)) + ' –º–∏–Ω—É—Ç–µ')
        except:
            target_time = resData[resData['mean'] <= resData['mean'].min()]['time'].iloc[0]
        
        fig = px.line(pd.DataFrame(resData), x='time', y='mean',line_shape="spline")
        fig = fig.update_layout(title='–ö–∏–Ω–µ—Ç–∏–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–º–µ–ª—å—á–µ–Ω–∏—è',xaxis_title='–≤—Ä–µ–º—è, –º–∏–Ω',yaxis_title='—Ä–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏—Ü, –º–∫–º')
        st.plotly_chart(fig)
        try:
            arr2 = resData[resData['mean'] <= averageSize ]['sizes'].iloc[0]
        except:
            arr2 = resData[resData['mean'] <= resData['mean'].min() ]['sizes'].iloc[0]

        f_particles = pd.DataFrame({'r':pd.Series(arr2[0]), 'f':pd.Series(arr2[1])})
        f_particles['f'] =100*f_particles['f'] / f_particles['f'].sum(axis=0)  
        f_particles['r'] = 2*f_particles['r']
        try:
            f_particles['time'] = 'time:'+str(resData[resData['mean'] >= averageSize ]['time'].iloc[-1])+' size:' + \
                                str(resData[resData['mean'] >= averageSize]['mean'].iloc[-1])
        except:
            f_particles['time'] = 'time:'+str(resData[resData['mean'] >= resData['mean'].min() ]['time'].iloc[-1])+' size:' + \
                                str(resData[resData['mean'] >= resData['mean'].min()]['mean'].iloc[-1])
        f_particles['cum_f'] = np.cumsum(f_particles['f'])
                
        #st.write('–°—Ä–µ–¥–Ω–µ–µ: ', resData[resData['mean'] <= mean ]['mean'].iloc[0],'<=>', np.average(arr2[0], weights = arr2[1]))
#         nbins= f_particles.shape[0]+1
        col1, col2 = st.columns(2)
        fig2 = px.line(f_particles, x= 'r', y='f', log_x=True)
        fig2 = fig2.update_layout(title='–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏—Ü –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º',xaxis_title='–†–∞–∑–º–µ—Ä —Ñ—Ä–∞–∫—Ü–∏–∏ —á–∞—Å—Ç–∏—Ü(–¥–∏–∞–º–µ—Ç—Ä—ã), –º–∫–º',yaxis_title='–î–æ–ª—è —Ñ—Ä–∞–∫—Ü–∏–∏, %')
        col1.plotly_chart(fig2)

        fig2_1 = px.line(f_particles, x= 'r', y='f')
        fig2_1 = fig2_1.update_layout(title='–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏—Ü –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º',xaxis_title='–†–∞–∑–º–µ—Ä —Ñ—Ä–∞–∫—Ü–∏–∏ —á–∞—Å—Ç–∏—Ü(–¥–∏–∞–º–µ—Ç—Ä—ã), –º–∫–º',yaxis_title='–î–æ–ª—è —Ñ—Ä–∞–∫—Ü–∏–∏, %')
        col2.plotly_chart(fig2_1)

        
        fig3 = px.line(f_particles, x= 'r', y='cum_f')
        fig3 = fig3.update_layout(title='–ò–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏—Ü –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º',xaxis_title='–†–∞–∑–º–µ—Ä —Ñ—Ä–∞–∫—Ü–∏–∏ —á–∞—Å—Ç–∏—Ü(–¥–∏–∞–º–µ—Ç—Ä—ã), –º–∫–º',yaxis_title='–î–æ–ª—è —Ñ—Ä–∞–∫—Ü–∏–∏, %')
        st.plotly_chart(fig3)

        fig4 = px.line(pd.DataFrame(resData), x='time', y='mass',line_shape="spline")
        fig4 = fig4.update_layout(title='–ú–∞—Å—Å–∞ —á–∞—Å—Ç–∏—Ü –≤–æ –≤—Ä–µ–º–µ–Ω–∏',xaxis_title='–≤—Ä–µ–º—è, –º–∏–Ω',yaxis_title='–º–∞—Å—Å–∞, –≥')
        st.plotly_chart(fig4)
        
        #st.dataframe(resData)
with st.expander('–°–ø—Ä–∞–≤–∫–∞'):
    """
    –î–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å—Ç–∏—Ü –ø—Ä–∏ –∏–∑–º–µ–ª—å—á–µ–Ω–∏–∏ –≤ –º–µ–ª—é—â–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏.
    –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—É—é —Ä–µ–≥—Ä–µ—Å—Å–∏–∏—é –¥–ª—è –ø–ª–∞–Ω–µ—Ç–∞—Ä–Ω–æ–π –º–µ–ª—å–Ω–∏—Ü—ã.

    –¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ–±—É—á–∞—é—â–∏–π –¥–∞—Ç–∞—Å–µ—Ç, –∏ –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å.
    –î–ª—è —ç—Ç–æ–≥–æ –∑–∞–≥—Ä—É–∑–∏—Ç–µ csv —Ñ–∞–π–ª —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥—Ä–æ–±–ª–µ–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ
    –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    m_sharov - –∫–æ–ª–æ–Ω–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–∞—è —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –º–∞—Å—Å –∏–∑–º–µ–ª—å—á–∞–µ–º–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏ –∏–∑–º–µ–ª—å—á–∞—é—â–µ–≥–æ
    r_sharov - –∫–æ–ª–æ–Ω–∫–∞ –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ —Ä–∞–∑–º–µ—Ä —à–∞—Ä–æ–≤
    d - –∫–æ–Ω–µ—á–Ω—ã–π —É—Å—Ç–æ–π—á–∏–≤—ã–π –∫ –∏–∑–º–µ–ª—å—á–µ–Ω–∏—é —Ä–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏—Ü –≤ –º–∏–∫—Ä–æ–Ω–∞—Ö

    –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ —Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –º–µ–Ω—é `–û–±—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏` –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å'
    –ü–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è –≤–∞–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å –º–æ–¥–µ–ª—å –Ω–∏–∂–µ –ø–æ–¥ –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—á—ë—Ç–∞.
    """



'''

–î–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –±—ã–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –≤ —Å—Ç–µ–Ω–∞—Ö **–†–•–¢–£** –∏–º. –î.–ò.–ú–µ–Ω–¥–µ–ª–µ–µ–≤–∞

**–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:**

–ö–æ–ª—å—Ü–æ–≤–∞ –≠–ª–µ–æ–Ω–æ—Ä–∞ –ú–æ–∏—Å–µ–µ–≤–Ω–∞

–ë–∞–±–∫–∏–Ω –ú–∏—Ö–∞–∏–ª –ê–Ω–¥—Ä–µ–µ–≤–∏—á

–ò–≤–∞–Ω–Ω–∏–∫–æ–≤ –ê—Ä—Ç—ë–º –ò–≥–æ—Ä–µ–≤–∏—á

–ü–æ–ø–æ–≤–∞ –ù–µ–ª–∏ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞





'''